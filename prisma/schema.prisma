// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique @db.VarChar(100)
  password            String
  createdAt           DateTime             @default(now()) @map("created_at")
  sessions            Session[]
  passwordResetTokens PasswordResetToken[] 

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  email        String
  expires      DateTime
  user         User     @relation(fields: [email], references: [id], onDelete: Cascade)
}

model Faqs {
  id       String @id @default(cuid())
  question String @unique
  answer   String
}

model FileMetaData {
  id         Int        @id @default(autoincrement())
  s3Url      String     @unique
  tags       String[]   // Optional for main gallery, not needed for puppy gallery
  puppy      Puppy?     @relation(fields: [puppyId], references: [id]) // Optional relation to Puppy
  puppyId    Int?       // Optional foreign key to Puppy model
  uploadDate DateTime   @default(now())
  fileType   String
  } 

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_token")
}



enum ContactType {
    GENERAL
    STUD
    PURCHASE
}

model ContactForm {
    id          String   @id @default(cuid())
    name       String   @db.VarChar(100)
    email       String   @db.VarChar(100)
    phone       String   @db.VarChar(30)
    contactType  ContactType        
    body        String   @db.VarChar(2000)

}

model Puppy {
  id        Int        @id @default(autoincrement())
  name      String
  birthdate  DateTime    // Store the birthdate
  color     String
  status    String     // available, sold, reserved
  price     Float
  gallery   FileMetaData[]  // relation to FileMetaData (multiple images in gallery)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

}

model Event {
  id             Int      @id @default(1)
  name           String
  date           DateTime  
  isEventActive  Boolean
}

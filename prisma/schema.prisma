generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique @db.VarChar(100)
  password            String
  createdAt           DateTime             @default(now()) @map("created_at")
  sessions            Session[]
  passwordResetTokens PasswordResetToken[]
  availabilities      Availability[]
  blogPosts BlogPost[]  // Relation to BlogPost model

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  email        String
  expires      DateTime
  user         User     @relation(fields: [email], references: [id], onDelete: Cascade)
}

model Faqs {
  id       String @id @default(cuid())
  question String @unique
  answer   String
}

model FileMetaData {
  id         Int      @id @default(autoincrement())
  s3Url      String   @unique
  tags       String[]
  uploadDate DateTime @default(now())
  fileType   String
  puppyId    Int?
  puppy      Puppy?   @relation(fields: [puppyId], references: [id])
}

model ContactForm {
  id          String      @id @default(cuid())
  email       String      @db.VarChar(100)
  phone       String      @db.VarChar(30)
  body        String      @db.VarChar(2000)
  contactType ContactType
  name        String      @db.VarChar(100)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_token")
}

enum PuppyStatus {
  Available
  Reserved
  Sold
}
enum PuppySex {
  Male
  Female
  Non_Specified
}

enum PersonalityTrait {
  calm
  shy
  happy
  lazy
  energetic
  playful
  curious
  intelligent
  friendly
  protective
}


model Puppy {
  id        Int            @id @default(autoincrement())
  name      String
  birthdate DateTime
  color     String
  status    PuppyStatus    @default(Available) 
  sex    PuppySex     
  price     Float
  personality PersonalityTrait[]
  description String
  breed  String
  dateAvailable DateTime 
  reservedUntil      DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  gallery   FileMetaData[]
  transactions Transaction[] 
  appointments Appointment[]
}

model Event {
  id            Int      @id @default(autoincrement())
  name          String
  date          DateTime @default(now())
  isEventActive Boolean
  showBanner    Boolean  @default(false)
}

model Transaction {
  id               Int      @id @default(autoincrement())
  transactionId    String
  customerName     String
  customerEmail    String
  customerPhone    String
  paymentType      String 
  price            Float? 
  reservedUntil      DateTime?
  appointmentDate  DateTime?
  puppyId          Int?     

  puppy Puppy? @relation(fields: [puppyId], references: [id])

  transactionTime DateTime @default(now())
}


enum ContactType {
  GENERAL
  STUD
  PURCHASE
}


enum AppointmentStatus {
  CONFIRMED
  PENDING
  CANCELED
}

// Add the Appointment model to your schema
model Appointment {
  id                     String   @id @default(cuid()) // Primary key, using UUID for unique ID
  customerName           String
  customerEmail          String   @db.VarChar(100)
  customerPhoneNumber    String   @db.VarChar(30)
  appointmentType        AppointmentType // Type of appointment (e.g., general, puppy, or stud)
  date                   DateTime // Appointment date
  startTime              DateTime // Start time of the appointment
  endTime                DateTime // End time of the appointment
  formattedDetails    String 
  status                 AppointmentStatus @default(PENDING)
  createdAt              DateTime @default(now()) // Record creation timestamp
  puppyId                Int?     // Optional foreign key for puppy relation
  puppy                  Puppy?   @relation(fields: [puppyId], references: [id], onDelete: SetNull)

  @@index([date, startTime], name: "appointment_time_index") // Index for faster querying of appointments
}

// Add the AppointmentType enum to your schema
enum AppointmentType {
  GENERAL
  PUPPY
  STUD
}

model Availability {
  id          String   @id @default(cuid())
  date        DateTime // Specific date for the slot
  timeSlot    String   // Time slot (e.g., '11:00', '12:00')
  status      String   @default("available") // "available" or "booked"
  adminId     String   // ID of the admin creating slots
  admin       User     @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@unique([date, timeSlot]) // Ensure unique slots per date and time
  @@index([date, status]) // Quick lookup by date and status
}

enum Rating {
  ONE
  ONE_HALF
  TWO
  TWO_HALF
  THREE
  THREE_HALF
  FOUR
  FOUR_HALF
  FIVE
}


model Testimonial {
  id         String   @id @default(uuid())
  name       String
  email      String
  rating     Rating
  comment    String
  photoUrl   String?
  createdAt  DateTime @default(now())
  published  Boolean
}


model BlogPost {
  id        String   @id @default(uuid()) // Unique identifier for each post
  title     String   // Title of the blog post
  content   String   // Content of the blog post
  featured  Boolean  @default(false) // Whether the post is featured or not
  imageUrl  String?  // Optional URL for the featured image
  createdAt DateTime @default(now()) // Timestamp when the post was created
  updatedAt DateTime @updatedAt // Automatically updates on modification

  authorId  String // Foreign key referencing the User model
  author    User   @relation(fields: [authorId], references: [id]) // Relation to the User model
}